{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\z00s600199\\\\OJT\\\\my-app-typescript\\\\src\\\\App.tsx\";\nimport React from 'react';\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\nimport './App.css';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = event => {\n      const result = this.videoConverter(this.state.file);\n      result.then(result => {\n        const data = window.URL.createObjectURL(new Blob([result]));\n        const url = document.createElement('a');\n        url.href = data;\n        url.setAttribute('download', 'audio.wav');\n        url.click();\n      });\n      event.preventDefault(); //ページ遷移を防ぐため\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  getFileInput(file) {\n    return new Promise(function (resolve, reject) {\n      const reader = new FileReader();\n      reader.onerror = reject;\n\n      reader.onload = function () {\n        resolve(reader.result);\n      };\n\n      reader.readAsBinaryString(file); // here the file can be read in different way Text, DataUrl, ArrayBuffer\n    });\n  }\n\n  manageUploadedFile(binary, file) {\n    console.log('the file size is ' + binary.length);\n    console.log('the file name is ' + file.name);\n    this.setState({\n      file: file\n    });\n  }\n\n  async videoConverter(file) {\n    const ffmpeg = createFFmpeg({\n      log: true\n    });\n    await ffmpeg.load();\n    ffmpeg.FS('writeFile', file.name, await fetchFile(file));\n    await ffmpeg.run('-i', file.name, 'audio.wav');\n    return ffmpeg.FS('readFile', 'audio.wav');\n  }\n\n  handleChange(event) {\n    if (event.target.files !== null) {\n      Array.from(event.target.files).forEach(file => {\n        this.setState({\n          file: file\n        });\n        /*this.getFileInput(file)\r\n        \r\n          .then((binary) => {\r\n            if (typeof binary === 'string'){\r\n              this.manageUploadedFile(binary,file);\r\n            } else {\r\n              console.log(\"binary is not string\");\r\n            }\r\n          }).catch(function (reason) {\r\n            console.log('error during upload ${reason}');\r\n            event.target.value = '';\r\n          })*/\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"video/mp4\",\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default MovieForm;","map":{"version":3,"sources":["C:/Users/z00s600199/OJT/my-app-typescript/src/App.tsx"],"names":["React","createFFmpeg","fetchFile","MovieForm","Component","constructor","props","handleSubmit","event","result","videoConverter","state","file","then","data","window","URL","createObjectURL","Blob","url","document","createElement","href","setAttribute","click","preventDefault","handleChange","bind","getFileInput","Promise","resolve","reject","reader","FileReader","onerror","onload","readAsBinaryString","manageUploadedFile","binary","console","log","length","name","setState","ffmpeg","load","FS","run","target","files","Array","from","forEach","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\r\nimport './App.css';\r\n\r\n\r\n\r\ninterface SquarePropsInterface {\r\n}\r\n\r\ninterface SquareStateInterface {\r\n  file: File;\r\n}\r\n\r\n\r\n\r\nclass MovieForm extends React.Component<SquarePropsInterface, SquareStateInterface> {\r\n  constructor(props:SquarePropsInterface) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  private getFileInput(file:File): Promise<string | ArrayBuffer | null> {\r\n    return new Promise(function (resolve, reject) {\r\n      const reader = new FileReader();\r\n      reader.onerror = reject;\r\n      reader.onload = function () { resolve(reader.result); };\r\n      reader.readAsBinaryString(file); // here the file can be read in different way Text, DataUrl, ArrayBuffer\r\n  });\r\n  }\r\n\r\n  private manageUploadedFile(binary:string, file: File) {\r\n    console.log('the file size is '+binary.length);\r\n    console.log('the file name is '+file.name);\r\n    this.setState({\r\n      file:file,\r\n    });\r\n  }\r\n\r\n  private async videoConverter(file:File):Promise<File> {\r\n      const ffmpeg = createFFmpeg({\r\n        log: true,\r\n      });\r\n      await ffmpeg.load();\r\n      ffmpeg.FS('writeFile',file.name,await fetchFile(file));\r\n      await ffmpeg.run('-i',file.name, 'audio.wav');\r\n      return ffmpeg.FS('readFile','audio.wav');\r\n    \r\n  }\r\n  private handleChange(event:React.ChangeEvent<HTMLInputElement>) {\r\n    if (event.target.files !== null) {\r\n      Array.from(event.target.files).forEach(file => {\r\n        this.setState({\r\n          file:file,\r\n        });\r\n        /*this.getFileInput(file)\r\n        \r\n          .then((binary) => {\r\n            if (typeof binary === 'string'){\r\n              this.manageUploadedFile(binary,file);\r\n            } else {\r\n              console.log(\"binary is not string\");\r\n            }\r\n          }).catch(function (reason) {\r\n            console.log('error during upload ${reason}');\r\n            event.target.value = '';\r\n          })*/\r\n      })\r\n    }\r\n  }\r\n  handleSubmit = (event:React.FormEvent<HTMLFormElement>):void => {\r\n\r\n    const result = this.videoConverter(this.state.file);\r\n    result.then((result) => {\r\n      const data = window.URL.createObjectURL(new Blob([result]));\r\n      const url = document.createElement('a');\r\n      url.href=data;\r\n      url.setAttribute('download','audio.wav');\r\n      url.click();\r\n    })\r\n    event.preventDefault();//ページ遷移を防ぐため\r\n  }\r\n  render() {\r\n    return (\r\n    <div>\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name:\r\n          <input type=\"file\" accept = \"video/mp4\" onChange={this.handleChange} />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieForm;\r\n\r\n"]},"metadata":{},"sourceType":"module"}