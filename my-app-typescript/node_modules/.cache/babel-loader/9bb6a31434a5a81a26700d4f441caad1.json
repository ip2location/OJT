{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\z00s600199\\\\OJT\\\\my-app-typescript\\\\src\\\\App.tsx\";\nimport React from 'react';\nimport { createFFmpeg } from '@ffmpeg/ffmpeg';\nimport './App.css';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const result = this.videoConverter(this.state.file);\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  getFileInput(file) {\n    return new Promise(function (resolve, reject) {\n      const reader = new FileReader();\n      reader.onerror = reject;\n\n      reader.onload = function () {\n        resolve(reader.result);\n      };\n\n      reader.readAsBinaryString(file); // here the file can be read in different way Text, DataUrl, ArrayBuffer\n    });\n  }\n\n  manageUploadedFile(binary, file) {\n    console.log('the file size is ' + binary.length);\n    console.log('the file name is ' + file.name);\n    this.setState({\n      file: file\n    });\n  }\n\n  videoConverter(file) {\n    async () => {\n      const ffmpeg = createFFmpeg({\n        log: true\n      });\n      await ffmpeg.load();\n      ffmpeg.FS('writeFile', 'video.mp4', this.state.file);\n      ffmpeg.run('-i', 'video.mp4', 'audio.wav');\n      return ffmpeg.FS('readFile', 'audio.wav');\n    };\n  }\n\n  handleChange(event) {\n    /*\r\n    const ffmpeg = createFFmpeg({\r\n      log: true,\r\n    });\r\n    \r\n    ffmpeg.load();\r\n    //@ts-ignore\r\n    ffmpeg.FS('writeFile','video.mp4',await fetchFile(event.target.files[0]));\r\n    ffmpeg.run('-i', 'video.mp4', 'audio.wav');\r\n    //errorハンドリングしてない、なんでエラー\r\n    //ffmpeg.FS('readFile','audio.wav');\r\n    Download();\r\n    //downloadしたい\r\n    \r\n    function Download() {\r\n      return <a id=\"download\" href=\"#\" download=\"./audio.wav\"></a>;\r\n    }\r\n    */\n    if (event.target.files !== null) {\n      Array.from(event.target.files).forEach(file => {\n        this.getFileInput(file).then(binary => {\n          if (typeof binary === 'string') {\n            this.manageUploadedFile(binary, file);\n          } else {\n            console.log(\"binary is not string\");\n          }\n        }).catch(function (reason) {\n          console.log('error during upload ${reason}');\n          event.target.value = '';\n        });\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"video/mp4\",\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default MovieForm;","map":{"version":3,"sources":["C:/Users/z00s600199/OJT/my-app-typescript/src/App.tsx"],"names":["React","createFFmpeg","MovieForm","Component","constructor","props","handleSubmit","event","preventDefault","result","videoConverter","state","file","handleChange","bind","getFileInput","Promise","resolve","reject","reader","FileReader","onerror","onload","readAsBinaryString","manageUploadedFile","binary","console","log","length","name","setState","ffmpeg","load","FS","run","target","files","Array","from","forEach","then","catch","reason","value","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport * as fs from 'fs';\r\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\r\nimport './App.css';\r\nimport { render } from '@testing-library/react';\r\nimport { fileURLToPath } from 'url';\r\n\r\n\r\ninterface SquarePropsInterface {\r\n}\r\n\r\ninterface SquareStateInterface {\r\n  file: File;\r\n  fileName: string;\r\n}\r\n\r\n\r\n\r\nclass MovieForm extends React.Component<SquarePropsInterface, SquareStateInterface> {\r\n  constructor(props:SquarePropsInterface) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  private getFileInput(file:File): Promise<string | ArrayBuffer | null> {\r\n    return new Promise(function (resolve, reject) {\r\n      const reader = new FileReader();\r\n      reader.onerror = reject;\r\n      reader.onload = function () { resolve(reader.result); };\r\n      reader.readAsBinaryString(file); // here the file can be read in different way Text, DataUrl, ArrayBuffer\r\n  });\r\n  }\r\n\r\n  private manageUploadedFile(binary:string, file: File) {\r\n    console.log('the file size is '+binary.length);\r\n    console.log('the file name is '+file.name);\r\n    this.setState({\r\n      file:file,\r\n    });\r\n  }\r\n\r\n  private videoConverter(file:File):any {\r\n    async () => {\r\n      const ffmpeg = createFFmpeg({\r\n        log: true,\r\n      });\r\n      \r\n      await ffmpeg.load();\r\n      ffmpeg.FS('writeFile','video.mp4',this.state.file);\r\n      ffmpeg.run('-i', 'video.mp4', 'audio.wav');\r\n      \r\n      return ffmpeg.FS('readFile','audio.wav');\r\n    }\r\n  }\r\n  private handleChange(event:React.ChangeEvent<HTMLInputElement>) {\r\n    /*\r\n    const ffmpeg = createFFmpeg({\r\n      log: true,\r\n    });\r\n    \r\n    ffmpeg.load();\r\n    //@ts-ignore\r\n    ffmpeg.FS('writeFile','video.mp4',await fetchFile(event.target.files[0]));\r\n    ffmpeg.run('-i', 'video.mp4', 'audio.wav');\r\n    //errorハンドリングしてない、なんでエラー\r\n    //ffmpeg.FS('readFile','audio.wav');\r\n    Download();\r\n    //downloadしたい\r\n    \r\n    function Download() {\r\n      return <a id=\"download\" href=\"#\" download=\"./audio.wav\"></a>;\r\n    }\r\n    */\r\n    if (event.target.files !== null) {\r\n      Array.from(event.target.files).forEach(file => {\r\n        this.getFileInput(file)\r\n          .then((binary) => {\r\n            if (typeof binary === 'string'){\r\n              this.manageUploadedFile(binary,file);\r\n            } else {\r\n              console.log(\"binary is not string\");\r\n            }\r\n          }).catch(function (reason) {\r\n            console.log('error during upload ${reason}');\r\n            event.target.value = '';\r\n          })\r\n      })\r\n    }\r\n  }\r\n  handleSubmit = (event:React.FormEvent<HTMLFormElement>):void => {\r\n    event.preventDefault();\r\n    const result = this.videoConverter(this.state.file);\r\n\r\n  }\r\n  render() {\r\n    return (\r\n    <div>\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name:\r\n          <input type=\"file\" accept = \"video/mp4\" onChange={this.handleChange} />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieForm;\r\n\r\n"]},"metadata":{},"sourceType":"module"}